// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	models "github.com/gary23b/sprites/models"
	mock "github.com/stretchr/testify/mock"
)

// Sprite is an autogenerated mock type for the Sprite type
type Sprite struct {
	mock.Mock
}

type Sprite_Expecter struct {
	mock *mock.Mock
}

func (_m *Sprite) EXPECT() *Sprite_Expecter {
	return &Sprite_Expecter{mock: &_m.Mock}
}

// AddMsg provides a mock function with given fields: msg
func (_m *Sprite) AddMsg(msg any) {
	_m.Called(msg)
}

// Sprite_AddMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMsg'
type Sprite_AddMsg_Call struct {
	*mock.Call
}

// AddMsg is a helper method to define mock.On call
//   - msg any
func (_e *Sprite_Expecter) AddMsg(msg interface{}) *Sprite_AddMsg_Call {
	return &Sprite_AddMsg_Call{Call: _e.mock.On("AddMsg", msg)}
}

func (_c *Sprite_AddMsg_Call) Run(run func(msg any)) *Sprite_AddMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any))
	})
	return _c
}

func (_c *Sprite_AddMsg_Call) Return() *Sprite_AddMsg_Call {
	_c.Call.Return()
	return _c
}

func (_c *Sprite_AddMsg_Call) RunAndReturn(run func(any)) *Sprite_AddMsg_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function with given fields: in
func (_m *Sprite) All(in models.SpriteState) {
	_m.Called(in)
}

// Sprite_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type Sprite_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
//   - in models.SpriteState
func (_e *Sprite_Expecter) All(in interface{}) *Sprite_All_Call {
	return &Sprite_All_Call{Call: _e.mock.On("All", in)}
}

func (_c *Sprite_All_Call) Run(run func(in models.SpriteState)) *Sprite_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.SpriteState))
	})
	return _c
}

func (_c *Sprite_All_Call) Return() *Sprite_All_Call {
	_c.Call.Return()
	return _c
}

func (_c *Sprite_All_Call) RunAndReturn(run func(models.SpriteState)) *Sprite_All_Call {
	_c.Call.Return(run)
	return _c
}

// Angle provides a mock function with given fields: angleDegrees
func (_m *Sprite) Angle(angleDegrees float64) {
	_m.Called(angleDegrees)
}

// Sprite_Angle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Angle'
type Sprite_Angle_Call struct {
	*mock.Call
}

// Angle is a helper method to define mock.On call
//   - angleDegrees float64
func (_e *Sprite_Expecter) Angle(angleDegrees interface{}) *Sprite_Angle_Call {
	return &Sprite_Angle_Call{Call: _e.mock.On("Angle", angleDegrees)}
}

func (_c *Sprite_Angle_Call) Run(run func(angleDegrees float64)) *Sprite_Angle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64))
	})
	return _c
}

func (_c *Sprite_Angle_Call) Return() *Sprite_Angle_Call {
	_c.Call.Return()
	return _c
}

func (_c *Sprite_Angle_Call) RunAndReturn(run func(float64)) *Sprite_Angle_Call {
	_c.Call.Return(run)
	return _c
}

// Clone provides a mock function with given fields: UniqueName
func (_m *Sprite) Clone(UniqueName string) models.Sprite {
	ret := _m.Called(UniqueName)

	if len(ret) == 0 {
		panic("no return value specified for Clone")
	}

	var r0 models.Sprite
	if rf, ok := ret.Get(0).(func(string) models.Sprite); ok {
		r0 = rf(UniqueName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Sprite)
		}
	}

	return r0
}

// Sprite_Clone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clone'
type Sprite_Clone_Call struct {
	*mock.Call
}

// Clone is a helper method to define mock.On call
//   - UniqueName string
func (_e *Sprite_Expecter) Clone(UniqueName interface{}) *Sprite_Clone_Call {
	return &Sprite_Clone_Call{Call: _e.mock.On("Clone", UniqueName)}
}

func (_c *Sprite_Clone_Call) Run(run func(UniqueName string)) *Sprite_Clone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Sprite_Clone_Call) Return(_a0 models.Sprite) *Sprite_Clone_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Sprite_Clone_Call) RunAndReturn(run func(string) models.Sprite) *Sprite_Clone_Call {
	_c.Call.Return(run)
	return _c
}

// Costume provides a mock function with given fields: name
func (_m *Sprite) Costume(name string) {
	_m.Called(name)
}

// Sprite_Costume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Costume'
type Sprite_Costume_Call struct {
	*mock.Call
}

// Costume is a helper method to define mock.On call
//   - name string
func (_e *Sprite_Expecter) Costume(name interface{}) *Sprite_Costume_Call {
	return &Sprite_Costume_Call{Call: _e.mock.On("Costume", name)}
}

func (_c *Sprite_Costume_Call) Run(run func(name string)) *Sprite_Costume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Sprite_Costume_Call) Return() *Sprite_Costume_Call {
	_c.Call.Return()
	return _c
}

func (_c *Sprite_Costume_Call) RunAndReturn(run func(string)) *Sprite_Costume_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSprite provides a mock function with given fields:
func (_m *Sprite) DeleteSprite() {
	_m.Called()
}

// Sprite_DeleteSprite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSprite'
type Sprite_DeleteSprite_Call struct {
	*mock.Call
}

// DeleteSprite is a helper method to define mock.On call
func (_e *Sprite_Expecter) DeleteSprite() *Sprite_DeleteSprite_Call {
	return &Sprite_DeleteSprite_Call{Call: _e.mock.On("DeleteSprite")}
}

func (_c *Sprite_DeleteSprite_Call) Run(run func()) *Sprite_DeleteSprite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Sprite_DeleteSprite_Call) Return() *Sprite_DeleteSprite_Call {
	_c.Call.Return()
	return _c
}

func (_c *Sprite_DeleteSprite_Call) RunAndReturn(run func()) *Sprite_DeleteSprite_Call {
	_c.Call.Return(run)
	return _c
}

// GetClickBody provides a mock function with given fields:
func (_m *Sprite) GetClickBody() models.ClickOnBody {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClickBody")
	}

	var r0 models.ClickOnBody
	if rf, ok := ret.Get(0).(func() models.ClickOnBody); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.ClickOnBody)
		}
	}

	return r0
}

// Sprite_GetClickBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClickBody'
type Sprite_GetClickBody_Call struct {
	*mock.Call
}

// GetClickBody is a helper method to define mock.On call
func (_e *Sprite_Expecter) GetClickBody() *Sprite_GetClickBody_Call {
	return &Sprite_GetClickBody_Call{Call: _e.mock.On("GetClickBody")}
}

func (_c *Sprite_GetClickBody_Call) Run(run func()) *Sprite_GetClickBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Sprite_GetClickBody_Call) Return(_a0 models.ClickOnBody) *Sprite_GetClickBody_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Sprite_GetClickBody_Call) RunAndReturn(run func() models.ClickOnBody) *Sprite_GetClickBody_Call {
	_c.Call.Return(run)
	return _c
}

// GetMsgs provides a mock function with given fields:
func (_m *Sprite) GetMsgs() []any {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMsgs")
	}

	var r0 []any
	if rf, ok := ret.Get(0).(func() []any); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]any)
		}
	}

	return r0
}

// Sprite_GetMsgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMsgs'
type Sprite_GetMsgs_Call struct {
	*mock.Call
}

// GetMsgs is a helper method to define mock.On call
func (_e *Sprite_Expecter) GetMsgs() *Sprite_GetMsgs_Call {
	return &Sprite_GetMsgs_Call{Call: _e.mock.On("GetMsgs")}
}

func (_c *Sprite_GetMsgs_Call) Run(run func()) *Sprite_GetMsgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Sprite_GetMsgs_Call) Return(_a0 []any) *Sprite_GetMsgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Sprite_GetMsgs_Call) RunAndReturn(run func() []any) *Sprite_GetMsgs_Call {
	_c.Call.Return(run)
	return _c
}

// GetSpriteID provides a mock function with given fields:
func (_m *Sprite) GetSpriteID() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSpriteID")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Sprite_GetSpriteID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSpriteID'
type Sprite_GetSpriteID_Call struct {
	*mock.Call
}

// GetSpriteID is a helper method to define mock.On call
func (_e *Sprite_Expecter) GetSpriteID() *Sprite_GetSpriteID_Call {
	return &Sprite_GetSpriteID_Call{Call: _e.mock.On("GetSpriteID")}
}

func (_c *Sprite_GetSpriteID_Call) Run(run func()) *Sprite_GetSpriteID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Sprite_GetSpriteID_Call) Return(_a0 int) *Sprite_GetSpriteID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Sprite_GetSpriteID_Call) RunAndReturn(run func() int) *Sprite_GetSpriteID_Call {
	_c.Call.Return(run)
	return _c
}

// GetState provides a mock function with given fields:
func (_m *Sprite) GetState() models.SpriteState {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 models.SpriteState
	if rf, ok := ret.Get(0).(func() models.SpriteState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.SpriteState)
	}

	return r0
}

// Sprite_GetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetState'
type Sprite_GetState_Call struct {
	*mock.Call
}

// GetState is a helper method to define mock.On call
func (_e *Sprite_Expecter) GetState() *Sprite_GetState_Call {
	return &Sprite_GetState_Call{Call: _e.mock.On("GetState")}
}

func (_c *Sprite_GetState_Call) Run(run func()) *Sprite_GetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Sprite_GetState_Call) Return(_a0 models.SpriteState) *Sprite_GetState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Sprite_GetState_Call) RunAndReturn(run func() models.SpriteState) *Sprite_GetState_Call {
	_c.Call.Return(run)
	return _c
}

// GetUniqueName provides a mock function with given fields:
func (_m *Sprite) GetUniqueName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUniqueName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Sprite_GetUniqueName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUniqueName'
type Sprite_GetUniqueName_Call struct {
	*mock.Call
}

// GetUniqueName is a helper method to define mock.On call
func (_e *Sprite_Expecter) GetUniqueName() *Sprite_GetUniqueName_Call {
	return &Sprite_GetUniqueName_Call{Call: _e.mock.On("GetUniqueName")}
}

func (_c *Sprite_GetUniqueName_Call) Run(run func()) *Sprite_GetUniqueName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Sprite_GetUniqueName_Call) Return(_a0 string) *Sprite_GetUniqueName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Sprite_GetUniqueName_Call) RunAndReturn(run func() string) *Sprite_GetUniqueName_Call {
	_c.Call.Return(run)
	return _c
}

// JustPressedUserInput provides a mock function with given fields:
func (_m *Sprite) JustPressedUserInput() *models.UserInput {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for JustPressedUserInput")
	}

	var r0 *models.UserInput
	if rf, ok := ret.Get(0).(func() *models.UserInput); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserInput)
		}
	}

	return r0
}

// Sprite_JustPressedUserInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JustPressedUserInput'
type Sprite_JustPressedUserInput_Call struct {
	*mock.Call
}

// JustPressedUserInput is a helper method to define mock.On call
func (_e *Sprite_Expecter) JustPressedUserInput() *Sprite_JustPressedUserInput_Call {
	return &Sprite_JustPressedUserInput_Call{Call: _e.mock.On("JustPressedUserInput")}
}

func (_c *Sprite_JustPressedUserInput_Call) Run(run func()) *Sprite_JustPressedUserInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Sprite_JustPressedUserInput_Call) Return(_a0 *models.UserInput) *Sprite_JustPressedUserInput_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Sprite_JustPressedUserInput_Call) RunAndReturn(run func() *models.UserInput) *Sprite_JustPressedUserInput_Call {
	_c.Call.Return(run)
	return _c
}

// Opacity provides a mock function with given fields: opacityPercent
func (_m *Sprite) Opacity(opacityPercent float64) {
	_m.Called(opacityPercent)
}

// Sprite_Opacity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Opacity'
type Sprite_Opacity_Call struct {
	*mock.Call
}

// Opacity is a helper method to define mock.On call
//   - opacityPercent float64
func (_e *Sprite_Expecter) Opacity(opacityPercent interface{}) *Sprite_Opacity_Call {
	return &Sprite_Opacity_Call{Call: _e.mock.On("Opacity", opacityPercent)}
}

func (_c *Sprite_Opacity_Call) Run(run func(opacityPercent float64)) *Sprite_Opacity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64))
	})
	return _c
}

func (_c *Sprite_Opacity_Call) Return() *Sprite_Opacity_Call {
	_c.Call.Return()
	return _c
}

func (_c *Sprite_Opacity_Call) RunAndReturn(run func(float64)) *Sprite_Opacity_Call {
	_c.Call.Return(run)
	return _c
}

// Pos provides a mock function with given fields: cartX, cartY
func (_m *Sprite) Pos(cartX float64, cartY float64) {
	_m.Called(cartX, cartY)
}

// Sprite_Pos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pos'
type Sprite_Pos_Call struct {
	*mock.Call
}

// Pos is a helper method to define mock.On call
//   - cartX float64
//   - cartY float64
func (_e *Sprite_Expecter) Pos(cartX interface{}, cartY interface{}) *Sprite_Pos_Call {
	return &Sprite_Pos_Call{Call: _e.mock.On("Pos", cartX, cartY)}
}

func (_c *Sprite_Pos_Call) Run(run func(cartX float64, cartY float64)) *Sprite_Pos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(float64))
	})
	return _c
}

func (_c *Sprite_Pos_Call) Return() *Sprite_Pos_Call {
	_c.Call.Return()
	return _c
}

func (_c *Sprite_Pos_Call) RunAndReturn(run func(float64, float64)) *Sprite_Pos_Call {
	_c.Call.Return(run)
	return _c
}

// PressedUserInput provides a mock function with given fields:
func (_m *Sprite) PressedUserInput() *models.UserInput {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PressedUserInput")
	}

	var r0 *models.UserInput
	if rf, ok := ret.Get(0).(func() *models.UserInput); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserInput)
		}
	}

	return r0
}

// Sprite_PressedUserInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PressedUserInput'
type Sprite_PressedUserInput_Call struct {
	*mock.Call
}

// PressedUserInput is a helper method to define mock.On call
func (_e *Sprite_Expecter) PressedUserInput() *Sprite_PressedUserInput_Call {
	return &Sprite_PressedUserInput_Call{Call: _e.mock.On("PressedUserInput")}
}

func (_c *Sprite_PressedUserInput_Call) Run(run func()) *Sprite_PressedUserInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Sprite_PressedUserInput_Call) Return(_a0 *models.UserInput) *Sprite_PressedUserInput_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Sprite_PressedUserInput_Call) RunAndReturn(run func() *models.UserInput) *Sprite_PressedUserInput_Call {
	_c.Call.Return(run)
	return _c
}

// ReplaceClickBody provides a mock function with given fields: in
func (_m *Sprite) ReplaceClickBody(in models.ClickOnBody) {
	_m.Called(in)
}

// Sprite_ReplaceClickBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplaceClickBody'
type Sprite_ReplaceClickBody_Call struct {
	*mock.Call
}

// ReplaceClickBody is a helper method to define mock.On call
//   - in models.ClickOnBody
func (_e *Sprite_Expecter) ReplaceClickBody(in interface{}) *Sprite_ReplaceClickBody_Call {
	return &Sprite_ReplaceClickBody_Call{Call: _e.mock.On("ReplaceClickBody", in)}
}

func (_c *Sprite_ReplaceClickBody_Call) Run(run func(in models.ClickOnBody)) *Sprite_ReplaceClickBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.ClickOnBody))
	})
	return _c
}

func (_c *Sprite_ReplaceClickBody_Call) Return() *Sprite_ReplaceClickBody_Call {
	_c.Call.Return()
	return _c
}

func (_c *Sprite_ReplaceClickBody_Call) RunAndReturn(run func(models.ClickOnBody)) *Sprite_ReplaceClickBody_Call {
	_c.Call.Return(run)
	return _c
}

// Scale provides a mock function with given fields: scale
func (_m *Sprite) Scale(scale float64) {
	_m.Called(scale)
}

// Sprite_Scale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scale'
type Sprite_Scale_Call struct {
	*mock.Call
}

// Scale is a helper method to define mock.On call
//   - scale float64
func (_e *Sprite_Expecter) Scale(scale interface{}) *Sprite_Scale_Call {
	return &Sprite_Scale_Call{Call: _e.mock.On("Scale", scale)}
}

func (_c *Sprite_Scale_Call) Run(run func(scale float64)) *Sprite_Scale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64))
	})
	return _c
}

func (_c *Sprite_Scale_Call) Return() *Sprite_Scale_Call {
	_c.Call.Return()
	return _c
}

func (_c *Sprite_Scale_Call) RunAndReturn(run func(float64)) *Sprite_Scale_Call {
	_c.Call.Return(run)
	return _c
}

// SendMsg provides a mock function with given fields: toSpriteID, msg
func (_m *Sprite) SendMsg(toSpriteID int, msg any) {
	_m.Called(toSpriteID, msg)
}

// Sprite_SendMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMsg'
type Sprite_SendMsg_Call struct {
	*mock.Call
}

// SendMsg is a helper method to define mock.On call
//   - toSpriteID int
//   - msg any
func (_e *Sprite_Expecter) SendMsg(toSpriteID interface{}, msg interface{}) *Sprite_SendMsg_Call {
	return &Sprite_SendMsg_Call{Call: _e.mock.On("SendMsg", toSpriteID, msg)}
}

func (_c *Sprite_SendMsg_Call) Run(run func(toSpriteID int, msg any)) *Sprite_SendMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(any))
	})
	return _c
}

func (_c *Sprite_SendMsg_Call) Return() *Sprite_SendMsg_Call {
	_c.Call.Return()
	return _c
}

func (_c *Sprite_SendMsg_Call) RunAndReturn(run func(int, any)) *Sprite_SendMsg_Call {
	_c.Call.Return(run)
	return _c
}

// SetType provides a mock function with given fields: newType
func (_m *Sprite) SetType(newType int) {
	_m.Called(newType)
}

// Sprite_SetType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetType'
type Sprite_SetType_Call struct {
	*mock.Call
}

// SetType is a helper method to define mock.On call
//   - newType int
func (_e *Sprite_Expecter) SetType(newType interface{}) *Sprite_SetType_Call {
	return &Sprite_SetType_Call{Call: _e.mock.On("SetType", newType)}
}

func (_c *Sprite_SetType_Call) Run(run func(newType int)) *Sprite_SetType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Sprite_SetType_Call) Return() *Sprite_SetType_Call {
	_c.Call.Return()
	return _c
}

func (_c *Sprite_SetType_Call) RunAndReturn(run func(int)) *Sprite_SetType_Call {
	_c.Call.Return(run)
	return _c
}

// Visible provides a mock function with given fields: visible
func (_m *Sprite) Visible(visible bool) {
	_m.Called(visible)
}

// Sprite_Visible_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Visible'
type Sprite_Visible_Call struct {
	*mock.Call
}

// Visible is a helper method to define mock.On call
//   - visible bool
func (_e *Sprite_Expecter) Visible(visible interface{}) *Sprite_Visible_Call {
	return &Sprite_Visible_Call{Call: _e.mock.On("Visible", visible)}
}

func (_c *Sprite_Visible_Call) Run(run func(visible bool)) *Sprite_Visible_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *Sprite_Visible_Call) Return() *Sprite_Visible_Call {
	_c.Call.Return()
	return _c
}

func (_c *Sprite_Visible_Call) RunAndReturn(run func(bool)) *Sprite_Visible_Call {
	_c.Call.Return(run)
	return _c
}

// WhoIsNearMe provides a mock function with given fields: distance
func (_m *Sprite) WhoIsNearMe(distance float64) []models.NearMeInfo {
	ret := _m.Called(distance)

	if len(ret) == 0 {
		panic("no return value specified for WhoIsNearMe")
	}

	var r0 []models.NearMeInfo
	if rf, ok := ret.Get(0).(func(float64) []models.NearMeInfo); ok {
		r0 = rf(distance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.NearMeInfo)
		}
	}

	return r0
}

// Sprite_WhoIsNearMe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhoIsNearMe'
type Sprite_WhoIsNearMe_Call struct {
	*mock.Call
}

// WhoIsNearMe is a helper method to define mock.On call
//   - distance float64
func (_e *Sprite_Expecter) WhoIsNearMe(distance interface{}) *Sprite_WhoIsNearMe_Call {
	return &Sprite_WhoIsNearMe_Call{Call: _e.mock.On("WhoIsNearMe", distance)}
}

func (_c *Sprite_WhoIsNearMe_Call) Run(run func(distance float64)) *Sprite_WhoIsNearMe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64))
	})
	return _c
}

func (_c *Sprite_WhoIsNearMe_Call) Return(_a0 []models.NearMeInfo) *Sprite_WhoIsNearMe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Sprite_WhoIsNearMe_Call) RunAndReturn(run func(float64) []models.NearMeInfo) *Sprite_WhoIsNearMe_Call {
	_c.Call.Return(run)
	return _c
}

// XYScale provides a mock function with given fields: xScale, yScale
func (_m *Sprite) XYScale(xScale float64, yScale float64) {
	_m.Called(xScale, yScale)
}

// Sprite_XYScale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XYScale'
type Sprite_XYScale_Call struct {
	*mock.Call
}

// XYScale is a helper method to define mock.On call
//   - xScale float64
//   - yScale float64
func (_e *Sprite_Expecter) XYScale(xScale interface{}, yScale interface{}) *Sprite_XYScale_Call {
	return &Sprite_XYScale_Call{Call: _e.mock.On("XYScale", xScale, yScale)}
}

func (_c *Sprite_XYScale_Call) Run(run func(xScale float64, yScale float64)) *Sprite_XYScale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(float64))
	})
	return _c
}

func (_c *Sprite_XYScale_Call) Return() *Sprite_XYScale_Call {
	_c.Call.Return()
	return _c
}

func (_c *Sprite_XYScale_Call) RunAndReturn(run func(float64, float64)) *Sprite_XYScale_Call {
	_c.Call.Return(run)
	return _c
}

// Z provides a mock function with given fields: _a0
func (_m *Sprite) Z(_a0 int) {
	_m.Called(_a0)
}

// Sprite_Z_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Z'
type Sprite_Z_Call struct {
	*mock.Call
}

// Z is a helper method to define mock.On call
//   - _a0 int
func (_e *Sprite_Expecter) Z(_a0 interface{}) *Sprite_Z_Call {
	return &Sprite_Z_Call{Call: _e.mock.On("Z", _a0)}
}

func (_c *Sprite_Z_Call) Run(run func(_a0 int)) *Sprite_Z_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Sprite_Z_Call) Return() *Sprite_Z_Call {
	_c.Call.Return()
	return _c
}

func (_c *Sprite_Z_Call) RunAndReturn(run func(int)) *Sprite_Z_Call {
	_c.Call.Return(run)
	return _c
}

// NewSprite creates a new instance of Sprite. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSprite(t interface {
	mock.TestingT
	Cleanup(func())
}) *Sprite {
	mock := &Sprite{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
