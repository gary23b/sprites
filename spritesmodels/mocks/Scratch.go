// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	image "image"

	models "github.com/gary23b/sprites/spritesmodels"
	mock "github.com/stretchr/testify/mock"
)

// Scratch is an autogenerated mock type for the Scratch type
type Scratch struct {
	mock.Mock
}

type Scratch_Expecter struct {
	mock *mock.Mock
}

func (_m *Scratch) EXPECT() *Scratch_Expecter {
	return &Scratch_Expecter{mock: &_m.Mock}
}

// AddCostume provides a mock function with given fields: img, name
func (_m *Scratch) AddCostume(img image.Image, name string) {
	_m.Called(img, name)
}

// Scratch_AddCostume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCostume'
type Scratch_AddCostume_Call struct {
	*mock.Call
}

// AddCostume is a helper method to define mock.On call
//   - img image.Image
//   - name string
func (_e *Scratch_Expecter) AddCostume(img interface{}, name interface{}) *Scratch_AddCostume_Call {
	return &Scratch_AddCostume_Call{Call: _e.mock.On("AddCostume", img, name)}
}

func (_c *Scratch_AddCostume_Call) Run(run func(img image.Image, name string)) *Scratch_AddCostume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(image.Image), args[1].(string))
	})
	return _c
}

func (_c *Scratch_AddCostume_Call) Return() *Scratch_AddCostume_Call {
	_c.Call.Return()
	return _c
}

func (_c *Scratch_AddCostume_Call) RunAndReturn(run func(image.Image, string)) *Scratch_AddCostume_Call {
	_c.Call.Return(run)
	return _c
}

// AddSound provides a mock function with given fields: path, name
func (_m *Scratch) AddSound(path string, name string) {
	_m.Called(path, name)
}

// Scratch_AddSound_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSound'
type Scratch_AddSound_Call struct {
	*mock.Call
}

// AddSound is a helper method to define mock.On call
//   - path string
//   - name string
func (_e *Scratch_Expecter) AddSound(path interface{}, name interface{}) *Scratch_AddSound_Call {
	return &Scratch_AddSound_Call{Call: _e.mock.On("AddSound", path, name)}
}

func (_c *Scratch_AddSound_Call) Run(run func(path string, name string)) *Scratch_AddSound_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Scratch_AddSound_Call) Return() *Scratch_AddSound_Call {
	_c.Call.Return()
	return _c
}

func (_c *Scratch_AddSound_Call) RunAndReturn(run func(string, string)) *Scratch_AddSound_Call {
	_c.Call.Return(run)
	return _c
}

// AddSprite provides a mock function with given fields: UniqueName
func (_m *Scratch) AddSprite(UniqueName string) models.Sprite {
	ret := _m.Called(UniqueName)

	if len(ret) == 0 {
		panic("no return value specified for AddSprite")
	}

	var r0 models.Sprite
	if rf, ok := ret.Get(0).(func(string) models.Sprite); ok {
		r0 = rf(UniqueName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Sprite)
		}
	}

	return r0
}

// Scratch_AddSprite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSprite'
type Scratch_AddSprite_Call struct {
	*mock.Call
}

// AddSprite is a helper method to define mock.On call
//   - UniqueName string
func (_e *Scratch_Expecter) AddSprite(UniqueName interface{}) *Scratch_AddSprite_Call {
	return &Scratch_AddSprite_Call{Call: _e.mock.On("AddSprite", UniqueName)}
}

func (_c *Scratch_AddSprite_Call) Run(run func(UniqueName string)) *Scratch_AddSprite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Scratch_AddSprite_Call) Return(_a0 models.Sprite) *Scratch_AddSprite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Scratch_AddSprite_Call) RunAndReturn(run func(string) models.Sprite) *Scratch_AddSprite_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllSprites provides a mock function with given fields:
func (_m *Scratch) DeleteAllSprites() {
	_m.Called()
}

// Scratch_DeleteAllSprites_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllSprites'
type Scratch_DeleteAllSprites_Call struct {
	*mock.Call
}

// DeleteAllSprites is a helper method to define mock.On call
func (_e *Scratch_Expecter) DeleteAllSprites() *Scratch_DeleteAllSprites_Call {
	return &Scratch_DeleteAllSprites_Call{Call: _e.mock.On("DeleteAllSprites")}
}

func (_c *Scratch_DeleteAllSprites_Call) Run(run func()) *Scratch_DeleteAllSprites_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Scratch_DeleteAllSprites_Call) Return() *Scratch_DeleteAllSprites_Call {
	_c.Call.Return()
	return _c
}

func (_c *Scratch_DeleteAllSprites_Call) RunAndReturn(run func()) *Scratch_DeleteAllSprites_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSprite provides a mock function with given fields: _a0
func (_m *Scratch) DeleteSprite(_a0 models.Sprite) {
	_m.Called(_a0)
}

// Scratch_DeleteSprite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSprite'
type Scratch_DeleteSprite_Call struct {
	*mock.Call
}

// DeleteSprite is a helper method to define mock.On call
//   - _a0 models.Sprite
func (_e *Scratch_Expecter) DeleteSprite(_a0 interface{}) *Scratch_DeleteSprite_Call {
	return &Scratch_DeleteSprite_Call{Call: _e.mock.On("DeleteSprite", _a0)}
}

func (_c *Scratch_DeleteSprite_Call) Run(run func(_a0 models.Sprite)) *Scratch_DeleteSprite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Sprite))
	})
	return _c
}

func (_c *Scratch_DeleteSprite_Call) Return() *Scratch_DeleteSprite_Call {
	_c.Call.Return()
	return _c
}

func (_c *Scratch_DeleteSprite_Call) RunAndReturn(run func(models.Sprite)) *Scratch_DeleteSprite_Call {
	_c.Call.Return(run)
	return _c
}

// Exit provides a mock function with given fields:
func (_m *Scratch) Exit() {
	_m.Called()
}

// Scratch_Exit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exit'
type Scratch_Exit_Call struct {
	*mock.Call
}

// Exit is a helper method to define mock.On call
func (_e *Scratch_Expecter) Exit() *Scratch_Exit_Call {
	return &Scratch_Exit_Call{Call: _e.mock.On("Exit")}
}

func (_c *Scratch_Exit_Call) Run(run func()) *Scratch_Exit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Scratch_Exit_Call) Return() *Scratch_Exit_Call {
	_c.Call.Return()
	return _c
}

func (_c *Scratch_Exit_Call) RunAndReturn(run func()) *Scratch_Exit_Call {
	_c.Call.Return(run)
	return _c
}

// GetHeight provides a mock function with given fields:
func (_m *Scratch) GetHeight() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHeight")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Scratch_GetHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeight'
type Scratch_GetHeight_Call struct {
	*mock.Call
}

// GetHeight is a helper method to define mock.On call
func (_e *Scratch_Expecter) GetHeight() *Scratch_GetHeight_Call {
	return &Scratch_GetHeight_Call{Call: _e.mock.On("GetHeight")}
}

func (_c *Scratch_GetHeight_Call) Run(run func()) *Scratch_GetHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Scratch_GetHeight_Call) Return(_a0 int) *Scratch_GetHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Scratch_GetHeight_Call) RunAndReturn(run func() int) *Scratch_GetHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetScreenshot provides a mock function with given fields:
func (_m *Scratch) GetScreenshot() image.Image {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetScreenshot")
	}

	var r0 image.Image
	if rf, ok := ret.Get(0).(func() image.Image); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(image.Image)
		}
	}

	return r0
}

// Scratch_GetScreenshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScreenshot'
type Scratch_GetScreenshot_Call struct {
	*mock.Call
}

// GetScreenshot is a helper method to define mock.On call
func (_e *Scratch_Expecter) GetScreenshot() *Scratch_GetScreenshot_Call {
	return &Scratch_GetScreenshot_Call{Call: _e.mock.On("GetScreenshot")}
}

func (_c *Scratch_GetScreenshot_Call) Run(run func()) *Scratch_GetScreenshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Scratch_GetScreenshot_Call) Return(_a0 image.Image) *Scratch_GetScreenshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Scratch_GetScreenshot_Call) RunAndReturn(run func() image.Image) *Scratch_GetScreenshot_Call {
	_c.Call.Return(run)
	return _c
}

// GetSpriteID provides a mock function with given fields: UniqueName
func (_m *Scratch) GetSpriteID(UniqueName string) int {
	ret := _m.Called(UniqueName)

	if len(ret) == 0 {
		panic("no return value specified for GetSpriteID")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(UniqueName)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Scratch_GetSpriteID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSpriteID'
type Scratch_GetSpriteID_Call struct {
	*mock.Call
}

// GetSpriteID is a helper method to define mock.On call
//   - UniqueName string
func (_e *Scratch_Expecter) GetSpriteID(UniqueName interface{}) *Scratch_GetSpriteID_Call {
	return &Scratch_GetSpriteID_Call{Call: _e.mock.On("GetSpriteID", UniqueName)}
}

func (_c *Scratch_GetSpriteID_Call) Run(run func(UniqueName string)) *Scratch_GetSpriteID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Scratch_GetSpriteID_Call) Return(_a0 int) *Scratch_GetSpriteID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Scratch_GetSpriteID_Call) RunAndReturn(run func(string) int) *Scratch_GetSpriteID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSpriteInfo provides a mock function with given fields: UniqueName
func (_m *Scratch) GetSpriteInfo(UniqueName string) models.SpriteState {
	ret := _m.Called(UniqueName)

	if len(ret) == 0 {
		panic("no return value specified for GetSpriteInfo")
	}

	var r0 models.SpriteState
	if rf, ok := ret.Get(0).(func(string) models.SpriteState); ok {
		r0 = rf(UniqueName)
	} else {
		r0 = ret.Get(0).(models.SpriteState)
	}

	return r0
}

// Scratch_GetSpriteInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSpriteInfo'
type Scratch_GetSpriteInfo_Call struct {
	*mock.Call
}

// GetSpriteInfo is a helper method to define mock.On call
//   - UniqueName string
func (_e *Scratch_Expecter) GetSpriteInfo(UniqueName interface{}) *Scratch_GetSpriteInfo_Call {
	return &Scratch_GetSpriteInfo_Call{Call: _e.mock.On("GetSpriteInfo", UniqueName)}
}

func (_c *Scratch_GetSpriteInfo_Call) Run(run func(UniqueName string)) *Scratch_GetSpriteInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Scratch_GetSpriteInfo_Call) Return(_a0 models.SpriteState) *Scratch_GetSpriteInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Scratch_GetSpriteInfo_Call) RunAndReturn(run func(string) models.SpriteState) *Scratch_GetSpriteInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetSpriteInfoByID provides a mock function with given fields: id
func (_m *Scratch) GetSpriteInfoByID(id int) models.SpriteState {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetSpriteInfoByID")
	}

	var r0 models.SpriteState
	if rf, ok := ret.Get(0).(func(int) models.SpriteState); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.SpriteState)
	}

	return r0
}

// Scratch_GetSpriteInfoByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSpriteInfoByID'
type Scratch_GetSpriteInfoByID_Call struct {
	*mock.Call
}

// GetSpriteInfoByID is a helper method to define mock.On call
//   - id int
func (_e *Scratch_Expecter) GetSpriteInfoByID(id interface{}) *Scratch_GetSpriteInfoByID_Call {
	return &Scratch_GetSpriteInfoByID_Call{Call: _e.mock.On("GetSpriteInfoByID", id)}
}

func (_c *Scratch_GetSpriteInfoByID_Call) Run(run func(id int)) *Scratch_GetSpriteInfoByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Scratch_GetSpriteInfoByID_Call) Return(_a0 models.SpriteState) *Scratch_GetSpriteInfoByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Scratch_GetSpriteInfoByID_Call) RunAndReturn(run func(int) models.SpriteState) *Scratch_GetSpriteInfoByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetWidth provides a mock function with given fields:
func (_m *Scratch) GetWidth() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWidth")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Scratch_GetWidth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWidth'
type Scratch_GetWidth_Call struct {
	*mock.Call
}

// GetWidth is a helper method to define mock.On call
func (_e *Scratch_Expecter) GetWidth() *Scratch_GetWidth_Call {
	return &Scratch_GetWidth_Call{Call: _e.mock.On("GetWidth")}
}

func (_c *Scratch_GetWidth_Call) Run(run func()) *Scratch_GetWidth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Scratch_GetWidth_Call) Return(_a0 int) *Scratch_GetWidth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Scratch_GetWidth_Call) RunAndReturn(run func() int) *Scratch_GetWidth_Call {
	_c.Call.Return(run)
	return _c
}

// PlaySound provides a mock function with given fields: name, volume
func (_m *Scratch) PlaySound(name string, volume float64) {
	_m.Called(name, volume)
}

// Scratch_PlaySound_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PlaySound'
type Scratch_PlaySound_Call struct {
	*mock.Call
}

// PlaySound is a helper method to define mock.On call
//   - name string
//   - volume float64
func (_e *Scratch_Expecter) PlaySound(name interface{}, volume interface{}) *Scratch_PlaySound_Call {
	return &Scratch_PlaySound_Call{Call: _e.mock.On("PlaySound", name, volume)}
}

func (_c *Scratch_PlaySound_Call) Run(run func(name string, volume float64)) *Scratch_PlaySound_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(float64))
	})
	return _c
}

func (_c *Scratch_PlaySound_Call) Return() *Scratch_PlaySound_Call {
	_c.Call.Return()
	return _c
}

func (_c *Scratch_PlaySound_Call) RunAndReturn(run func(string, float64)) *Scratch_PlaySound_Call {
	_c.Call.Return(run)
	return _c
}

// PressedUserInput provides a mock function with given fields:
func (_m *Scratch) PressedUserInput() *models.UserInput {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PressedUserInput")
	}

	var r0 *models.UserInput
	if rf, ok := ret.Get(0).(func() *models.UserInput); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserInput)
		}
	}

	return r0
}

// Scratch_PressedUserInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PressedUserInput'
type Scratch_PressedUserInput_Call struct {
	*mock.Call
}

// PressedUserInput is a helper method to define mock.On call
func (_e *Scratch_Expecter) PressedUserInput() *Scratch_PressedUserInput_Call {
	return &Scratch_PressedUserInput_Call{Call: _e.mock.On("PressedUserInput")}
}

func (_c *Scratch_PressedUserInput_Call) Run(run func()) *Scratch_PressedUserInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Scratch_PressedUserInput_Call) Return(_a0 *models.UserInput) *Scratch_PressedUserInput_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Scratch_PressedUserInput_Call) RunAndReturn(run func() *models.UserInput) *Scratch_PressedUserInput_Call {
	_c.Call.Return(run)
	return _c
}

// SendMsg provides a mock function with given fields: toSpriteID, msg
func (_m *Scratch) SendMsg(toSpriteID int, msg any) {
	_m.Called(toSpriteID, msg)
}

// Scratch_SendMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMsg'
type Scratch_SendMsg_Call struct {
	*mock.Call
}

// SendMsg is a helper method to define mock.On call
//   - toSpriteID int
//   - msg any
func (_e *Scratch_Expecter) SendMsg(toSpriteID interface{}, msg interface{}) *Scratch_SendMsg_Call {
	return &Scratch_SendMsg_Call{Call: _e.mock.On("SendMsg", toSpriteID, msg)}
}

func (_c *Scratch_SendMsg_Call) Run(run func(toSpriteID int, msg any)) *Scratch_SendMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(any))
	})
	return _c
}

func (_c *Scratch_SendMsg_Call) Return() *Scratch_SendMsg_Call {
	_c.Call.Return()
	return _c
}

func (_c *Scratch_SendMsg_Call) RunAndReturn(run func(int, any)) *Scratch_SendMsg_Call {
	_c.Call.Return(run)
	return _c
}

// SpriteUpdateFull provides a mock function with given fields: in
func (_m *Scratch) SpriteUpdateFull(in models.Sprite) {
	_m.Called(in)
}

// Scratch_SpriteUpdateFull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SpriteUpdateFull'
type Scratch_SpriteUpdateFull_Call struct {
	*mock.Call
}

// SpriteUpdateFull is a helper method to define mock.On call
//   - in models.Sprite
func (_e *Scratch_Expecter) SpriteUpdateFull(in interface{}) *Scratch_SpriteUpdateFull_Call {
	return &Scratch_SpriteUpdateFull_Call{Call: _e.mock.On("SpriteUpdateFull", in)}
}

func (_c *Scratch_SpriteUpdateFull_Call) Run(run func(in models.Sprite)) *Scratch_SpriteUpdateFull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Sprite))
	})
	return _c
}

func (_c *Scratch_SpriteUpdateFull_Call) Return() *Scratch_SpriteUpdateFull_Call {
	_c.Call.Return()
	return _c
}

func (_c *Scratch_SpriteUpdateFull_Call) RunAndReturn(run func(models.Sprite)) *Scratch_SpriteUpdateFull_Call {
	_c.Call.Return(run)
	return _c
}

// SpriteUpdatePosAngle provides a mock function with given fields: in
func (_m *Scratch) SpriteUpdatePosAngle(in models.Sprite) {
	_m.Called(in)
}

// Scratch_SpriteUpdatePosAngle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SpriteUpdatePosAngle'
type Scratch_SpriteUpdatePosAngle_Call struct {
	*mock.Call
}

// SpriteUpdatePosAngle is a helper method to define mock.On call
//   - in models.Sprite
func (_e *Scratch_Expecter) SpriteUpdatePosAngle(in interface{}) *Scratch_SpriteUpdatePosAngle_Call {
	return &Scratch_SpriteUpdatePosAngle_Call{Call: _e.mock.On("SpriteUpdatePosAngle", in)}
}

func (_c *Scratch_SpriteUpdatePosAngle_Call) Run(run func(in models.Sprite)) *Scratch_SpriteUpdatePosAngle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Sprite))
	})
	return _c
}

func (_c *Scratch_SpriteUpdatePosAngle_Call) Return() *Scratch_SpriteUpdatePosAngle_Call {
	_c.Call.Return()
	return _c
}

func (_c *Scratch_SpriteUpdatePosAngle_Call) RunAndReturn(run func(models.Sprite)) *Scratch_SpriteUpdatePosAngle_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeToJustPressedUserInput provides a mock function with given fields:
func (_m *Scratch) SubscribeToJustPressedUserInput() chan *models.UserInput {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToJustPressedUserInput")
	}

	var r0 chan *models.UserInput
	if rf, ok := ret.Get(0).(func() chan *models.UserInput); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *models.UserInput)
		}
	}

	return r0
}

// Scratch_SubscribeToJustPressedUserInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeToJustPressedUserInput'
type Scratch_SubscribeToJustPressedUserInput_Call struct {
	*mock.Call
}

// SubscribeToJustPressedUserInput is a helper method to define mock.On call
func (_e *Scratch_Expecter) SubscribeToJustPressedUserInput() *Scratch_SubscribeToJustPressedUserInput_Call {
	return &Scratch_SubscribeToJustPressedUserInput_Call{Call: _e.mock.On("SubscribeToJustPressedUserInput")}
}

func (_c *Scratch_SubscribeToJustPressedUserInput_Call) Run(run func()) *Scratch_SubscribeToJustPressedUserInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Scratch_SubscribeToJustPressedUserInput_Call) Return(_a0 chan *models.UserInput) *Scratch_SubscribeToJustPressedUserInput_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Scratch_SubscribeToJustPressedUserInput_Call) RunAndReturn(run func() chan *models.UserInput) *Scratch_SubscribeToJustPressedUserInput_Call {
	_c.Call.Return(run)
	return _c
}

// UnSubscribeToJustPressedUserInput provides a mock function with given fields: in
func (_m *Scratch) UnSubscribeToJustPressedUserInput(in chan *models.UserInput) {
	_m.Called(in)
}

// Scratch_UnSubscribeToJustPressedUserInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnSubscribeToJustPressedUserInput'
type Scratch_UnSubscribeToJustPressedUserInput_Call struct {
	*mock.Call
}

// UnSubscribeToJustPressedUserInput is a helper method to define mock.On call
//   - in chan *models.UserInput
func (_e *Scratch_Expecter) UnSubscribeToJustPressedUserInput(in interface{}) *Scratch_UnSubscribeToJustPressedUserInput_Call {
	return &Scratch_UnSubscribeToJustPressedUserInput_Call{Call: _e.mock.On("UnSubscribeToJustPressedUserInput", in)}
}

func (_c *Scratch_UnSubscribeToJustPressedUserInput_Call) Run(run func(in chan *models.UserInput)) *Scratch_UnSubscribeToJustPressedUserInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(chan *models.UserInput))
	})
	return _c
}

func (_c *Scratch_UnSubscribeToJustPressedUserInput_Call) Return() *Scratch_UnSubscribeToJustPressedUserInput_Call {
	_c.Call.Return()
	return _c
}

func (_c *Scratch_UnSubscribeToJustPressedUserInput_Call) RunAndReturn(run func(chan *models.UserInput)) *Scratch_UnSubscribeToJustPressedUserInput_Call {
	_c.Call.Return(run)
	return _c
}

// WhoIsNearMe provides a mock function with given fields: x, y, distance
func (_m *Scratch) WhoIsNearMe(x float64, y float64, distance float64) []models.NearMeInfo {
	ret := _m.Called(x, y, distance)

	if len(ret) == 0 {
		panic("no return value specified for WhoIsNearMe")
	}

	var r0 []models.NearMeInfo
	if rf, ok := ret.Get(0).(func(float64, float64, float64) []models.NearMeInfo); ok {
		r0 = rf(x, y, distance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.NearMeInfo)
		}
	}

	return r0
}

// Scratch_WhoIsNearMe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhoIsNearMe'
type Scratch_WhoIsNearMe_Call struct {
	*mock.Call
}

// WhoIsNearMe is a helper method to define mock.On call
//   - x float64
//   - y float64
//   - distance float64
func (_e *Scratch_Expecter) WhoIsNearMe(x interface{}, y interface{}, distance interface{}) *Scratch_WhoIsNearMe_Call {
	return &Scratch_WhoIsNearMe_Call{Call: _e.mock.On("WhoIsNearMe", x, y, distance)}
}

func (_c *Scratch_WhoIsNearMe_Call) Run(run func(x float64, y float64, distance float64)) *Scratch_WhoIsNearMe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(float64), args[2].(float64))
	})
	return _c
}

func (_c *Scratch_WhoIsNearMe_Call) Return(_a0 []models.NearMeInfo) *Scratch_WhoIsNearMe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Scratch_WhoIsNearMe_Call) RunAndReturn(run func(float64, float64, float64) []models.NearMeInfo) *Scratch_WhoIsNearMe_Call {
	_c.Call.Return(run)
	return _c
}

// NewScratch creates a new instance of Scratch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScratch(t interface {
	mock.TestingT
	Cleanup(func())
}) *Scratch {
	mock := &Scratch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
