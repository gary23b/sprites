// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	models "github.com/gary23b/sprites/spritesmodels"
	mock "github.com/stretchr/testify/mock"
)

// ClickOnBody is an autogenerated mock type for the ClickOnBody type
type ClickOnBody struct {
	mock.Mock
}

type ClickOnBody_Expecter struct {
	mock *mock.Mock
}

func (_m *ClickOnBody) EXPECT() *ClickOnBody_Expecter {
	return &ClickOnBody_Expecter{mock: &_m.Mock}
}

// AddCircleBody provides a mock function with given fields: x, y, radius
func (_m *ClickOnBody) AddCircleBody(x float64, y float64, radius float64) {
	_m.Called(x, y, radius)
}

// ClickOnBody_AddCircleBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCircleBody'
type ClickOnBody_AddCircleBody_Call struct {
	*mock.Call
}

// AddCircleBody is a helper method to define mock.On call
//   - x float64
//   - y float64
//   - radius float64
func (_e *ClickOnBody_Expecter) AddCircleBody(x interface{}, y interface{}, radius interface{}) *ClickOnBody_AddCircleBody_Call {
	return &ClickOnBody_AddCircleBody_Call{Call: _e.mock.On("AddCircleBody", x, y, radius)}
}

func (_c *ClickOnBody_AddCircleBody_Call) Run(run func(x float64, y float64, radius float64)) *ClickOnBody_AddCircleBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(float64), args[2].(float64))
	})
	return _c
}

func (_c *ClickOnBody_AddCircleBody_Call) Return() *ClickOnBody_AddCircleBody_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClickOnBody_AddCircleBody_Call) RunAndReturn(run func(float64, float64, float64)) *ClickOnBody_AddCircleBody_Call {
	_c.Call.Return(run)
	return _c
}

// AddRectangleBody provides a mock function with given fields: x1, x2, y1, y2
func (_m *ClickOnBody) AddRectangleBody(x1 float64, x2 float64, y1 float64, y2 float64) {
	_m.Called(x1, x2, y1, y2)
}

// ClickOnBody_AddRectangleBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRectangleBody'
type ClickOnBody_AddRectangleBody_Call struct {
	*mock.Call
}

// AddRectangleBody is a helper method to define mock.On call
//   - x1 float64
//   - x2 float64
//   - y1 float64
//   - y2 float64
func (_e *ClickOnBody_Expecter) AddRectangleBody(x1 interface{}, x2 interface{}, y1 interface{}, y2 interface{}) *ClickOnBody_AddRectangleBody_Call {
	return &ClickOnBody_AddRectangleBody_Call{Call: _e.mock.On("AddRectangleBody", x1, x2, y1, y2)}
}

func (_c *ClickOnBody_AddRectangleBody_Call) Run(run func(x1 float64, x2 float64, y1 float64, y2 float64)) *ClickOnBody_AddRectangleBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(float64), args[2].(float64), args[3].(float64))
	})
	return _c
}

func (_c *ClickOnBody_AddRectangleBody_Call) Return() *ClickOnBody_AddRectangleBody_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClickOnBody_AddRectangleBody_Call) RunAndReturn(run func(float64, float64, float64, float64)) *ClickOnBody_AddRectangleBody_Call {
	_c.Call.Return(run)
	return _c
}

// Angle provides a mock function with given fields: RadAngle
func (_m *ClickOnBody) Angle(RadAngle float64) {
	_m.Called(RadAngle)
}

// ClickOnBody_Angle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Angle'
type ClickOnBody_Angle_Call struct {
	*mock.Call
}

// Angle is a helper method to define mock.On call
//   - RadAngle float64
func (_e *ClickOnBody_Expecter) Angle(RadAngle interface{}) *ClickOnBody_Angle_Call {
	return &ClickOnBody_Angle_Call{Call: _e.mock.On("Angle", RadAngle)}
}

func (_c *ClickOnBody_Angle_Call) Run(run func(RadAngle float64)) *ClickOnBody_Angle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64))
	})
	return _c
}

func (_c *ClickOnBody_Angle_Call) Return() *ClickOnBody_Angle_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClickOnBody_Angle_Call) RunAndReturn(run func(float64)) *ClickOnBody_Angle_Call {
	_c.Call.Return(run)
	return _c
}

// Clone provides a mock function with given fields:
func (_m *ClickOnBody) Clone() models.ClickOnBody {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Clone")
	}

	var r0 models.ClickOnBody
	if rf, ok := ret.Get(0).(func() models.ClickOnBody); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.ClickOnBody)
		}
	}

	return r0
}

// ClickOnBody_Clone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clone'
type ClickOnBody_Clone_Call struct {
	*mock.Call
}

// Clone is a helper method to define mock.On call
func (_e *ClickOnBody_Expecter) Clone() *ClickOnBody_Clone_Call {
	return &ClickOnBody_Clone_Call{Call: _e.mock.On("Clone")}
}

func (_c *ClickOnBody_Clone_Call) Run(run func()) *ClickOnBody_Clone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClickOnBody_Clone_Call) Return(_a0 models.ClickOnBody) *ClickOnBody_Clone_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClickOnBody_Clone_Call) RunAndReturn(run func() models.ClickOnBody) *ClickOnBody_Clone_Call {
	_c.Call.Return(run)
	return _c
}

// GetMousePosRelativeToOriginalSprite provides a mock function with given fields: x, y
func (_m *ClickOnBody) GetMousePosRelativeToOriginalSprite(x float64, y float64) (float64, float64) {
	ret := _m.Called(x, y)

	if len(ret) == 0 {
		panic("no return value specified for GetMousePosRelativeToOriginalSprite")
	}

	var r0 float64
	var r1 float64
	if rf, ok := ret.Get(0).(func(float64, float64) (float64, float64)); ok {
		return rf(x, y)
	}
	if rf, ok := ret.Get(0).(func(float64, float64) float64); ok {
		r0 = rf(x, y)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(float64, float64) float64); ok {
		r1 = rf(x, y)
	} else {
		r1 = ret.Get(1).(float64)
	}

	return r0, r1
}

// ClickOnBody_GetMousePosRelativeToOriginalSprite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMousePosRelativeToOriginalSprite'
type ClickOnBody_GetMousePosRelativeToOriginalSprite_Call struct {
	*mock.Call
}

// GetMousePosRelativeToOriginalSprite is a helper method to define mock.On call
//   - x float64
//   - y float64
func (_e *ClickOnBody_Expecter) GetMousePosRelativeToOriginalSprite(x interface{}, y interface{}) *ClickOnBody_GetMousePosRelativeToOriginalSprite_Call {
	return &ClickOnBody_GetMousePosRelativeToOriginalSprite_Call{Call: _e.mock.On("GetMousePosRelativeToOriginalSprite", x, y)}
}

func (_c *ClickOnBody_GetMousePosRelativeToOriginalSprite_Call) Run(run func(x float64, y float64)) *ClickOnBody_GetMousePosRelativeToOriginalSprite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(float64))
	})
	return _c
}

func (_c *ClickOnBody_GetMousePosRelativeToOriginalSprite_Call) Return(_a0 float64, _a1 float64) *ClickOnBody_GetMousePosRelativeToOriginalSprite_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClickOnBody_GetMousePosRelativeToOriginalSprite_Call) RunAndReturn(run func(float64, float64) (float64, float64)) *ClickOnBody_GetMousePosRelativeToOriginalSprite_Call {
	_c.Call.Return(run)
	return _c
}

// IsMouseClickInBody provides a mock function with given fields: x, y
func (_m *ClickOnBody) IsMouseClickInBody(x float64, y float64) bool {
	ret := _m.Called(x, y)

	if len(ret) == 0 {
		panic("no return value specified for IsMouseClickInBody")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(float64, float64) bool); ok {
		r0 = rf(x, y)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ClickOnBody_IsMouseClickInBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsMouseClickInBody'
type ClickOnBody_IsMouseClickInBody_Call struct {
	*mock.Call
}

// IsMouseClickInBody is a helper method to define mock.On call
//   - x float64
//   - y float64
func (_e *ClickOnBody_Expecter) IsMouseClickInBody(x interface{}, y interface{}) *ClickOnBody_IsMouseClickInBody_Call {
	return &ClickOnBody_IsMouseClickInBody_Call{Call: _e.mock.On("IsMouseClickInBody", x, y)}
}

func (_c *ClickOnBody_IsMouseClickInBody_Call) Run(run func(x float64, y float64)) *ClickOnBody_IsMouseClickInBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(float64))
	})
	return _c
}

func (_c *ClickOnBody_IsMouseClickInBody_Call) Return(_a0 bool) *ClickOnBody_IsMouseClickInBody_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClickOnBody_IsMouseClickInBody_Call) RunAndReturn(run func(float64, float64) bool) *ClickOnBody_IsMouseClickInBody_Call {
	_c.Call.Return(run)
	return _c
}

// Pos provides a mock function with given fields: x, y
func (_m *ClickOnBody) Pos(x float64, y float64) {
	_m.Called(x, y)
}

// ClickOnBody_Pos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pos'
type ClickOnBody_Pos_Call struct {
	*mock.Call
}

// Pos is a helper method to define mock.On call
//   - x float64
//   - y float64
func (_e *ClickOnBody_Expecter) Pos(x interface{}, y interface{}) *ClickOnBody_Pos_Call {
	return &ClickOnBody_Pos_Call{Call: _e.mock.On("Pos", x, y)}
}

func (_c *ClickOnBody_Pos_Call) Run(run func(x float64, y float64)) *ClickOnBody_Pos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(float64))
	})
	return _c
}

func (_c *ClickOnBody_Pos_Call) Return() *ClickOnBody_Pos_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClickOnBody_Pos_Call) RunAndReturn(run func(float64, float64)) *ClickOnBody_Pos_Call {
	_c.Call.Return(run)
	return _c
}

// NewClickOnBody creates a new instance of ClickOnBody. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClickOnBody(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClickOnBody {
	mock := &ClickOnBody{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
